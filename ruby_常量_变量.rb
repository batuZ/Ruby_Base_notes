# => 常量
# => 常量名首字母要大写
# => Ruby 建议常量名全部用大写，提高可读
# => 作用域在定义常量的类或代码块内，与变量相同
WEEK = 7
WEEK = 9	#这里不会报错，只会出现警告
p WEEK

# => 顶层常量可以定义在任意位置，与类、模块和方法同级
# => 在类中访问顶层常量要用：：
# => 在有同名常量时，顶层优先级最低，与当前调用最近的最高
class A
	p ::WEEK
end
# => 常量可以定义在类、程序顶层、模块中，不能定义在方法中




# => 变量

# => 局部变量要以 a - z 或 _ 开头
# => 定义在 类、模块或方法内部
# => 作用域在声明变量的类、模块、方法内部，离开则销毁
# => 只在声明区有效，内部类或子类不能访问
abc = 4.6
p abc



# => 全局变量
# => 位于程序顶层的变量，以 $开头
# => 可以在不同的类和方法中访问
$number = 12
def fuc
	p $number
end
class B
	p $number
end
# => 尽量少用全局变量
# => 系统全局变量：
p $!	# => 最近的一次错误信息
p $@	# => 错误产生的位置
p $_	# => 刚刚 gets 的字符串
p $.	# => 解释器刚刚读的行数
p $&	# => 最近一次符合正则表达式的 字符串
p $~	# => 作为 子表达式组的 最近一次匹配
p $n  	# => 最近匹配的第n个子表达式（同 $~[n]） 
p $=	# => 是否区别大小写的标志
p $/	# => 输入记录分隔符
p $\	# => 输出记录分隔符
p $0	# => 不论$0出现在requier的文件中还是本文件中，值都是当前运行脚本的文件名，同$PROGRAM_NAME
p $*	# => 命令行参数
p $$	# => 解释器进程ID
p $?	# => 最近一次进程退出状态
p __FILE__ 	# => 返回__FILE__所在的文件名
p __LINE__ # => 返回__LINE__所在的行
p $FILENAME	# => 其值为程序的文件名参数,如果文件名参数大于1个,则为第一个参数,如果该参数不是有效的文件名,则会抛出异常
